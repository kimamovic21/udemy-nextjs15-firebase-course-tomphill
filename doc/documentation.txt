Next.js 15 & Firebase - Fire Homes Project


Section 01: Introduction & Setup

01. Introduction

02. Important! Please read this before you start the course! (GitHub repo etc)

03. Udemy ratings and reviews

04. How this setup differs from traditional React + Firebase apps

05. Overview of stack + helpful tools for this course

06. Set up Next JS project
-open web page: https://nextjs.org/
-type command: npx create-next-app@latest .
-create folder doc and documentation.txt file for project description
-update description in README.md file

07. Set up Firebase project
-open web page: https://firebase.google.com/
-create new project: Udemy Fire Homes Project
-open project and add authentication options
-create Firestore Database
-create Firebase Cloud Storage Bucket

08. Connect Next JS to Firebase
-select option Add Firebase to your web app
-open link: https://www.npmjs.com/package/firebase
-type command: npm install firebase
-create folder firebase and client.ts file
-in client.ts file import functions  initializeApp, getApps from package firebase/app
-import type Auth and function getAuth from package firebase/auth
-import type FirebaseStorage and function getStorage from package firebase/storage
-create variable const firebaseConfig 
-create variable let auth with type Auth
-create variable let storage with type FirebaseStorage
-add condition if (!currentApps.length) - else
-in condition if (!currentApps.length) create variable const app
-redeclare variables auth and storage
-in condition else create variable const app
-redeclare variables auth and storage
-export functions auth and storage
-open project settings and generate new private key
-create .env and example.env variables
-in .env file create variables: FIREBASE_PRIVATE_KEY_ID, FIREBASE_PRIVATE_KEY, FIREBASE_CLIENT_EMAIL and FIREBASE_CLIENT_ID
-in example.env file add example of created variable
-open link: https://www.npmjs.com/package/firebase-admin
-type command: npm i firebase-admin
-in folder firebase create server.ts file
-in server.ts file create variable const serviceAccount
-import function getApps and type ServiceAccount from package firebase-admin/app
-import function getFirestore and type Firestore from package firebase-admin/firestore
-import function function getAuth and type type Auth from package firebase-admin/auth
-import object admin from package firebase-admin
-create variable let firestore with type Firestore
-create variable let auth with type Auth
-create variable const currentApps 
-add condition if (!currentApps.length) - else
-in condition if (!currentApps.length) create variable const app
-redeclare variables firestore and auth 
-in condition else create variable const app
-redeclare variables firestore and auth 
-in .env.local create variables: FIREBASE_API_KEY, FIREBASE_MESSAGING_SENDER_ID and FIREBASE_APP_ID
-in example.env file add example of created variable


Section 02: Build the Login with Google functionality

09. Add the navbar with auth links
-in folder app create folder login and component page.tsx
-in component login/page.tsx create and export function LoginPage() as default
-create folder (auth) and move folder login to folder (auth)
-create folder register and component page.tsx
-in component register/page.tsx create and export function RegisterPage() as default
-open route: http://localhost:3000/login
-open route: http://localhost:3000/register
-in component layout.tsx import component Link
-jsx create nav element with Tailwind CSS classes
-in nav element add component Link and ul element

10. Install shadcn ui and add login with Google
-open web page: https://ui.shadcn.com/
-open link: https://ui.shadcn.com/docs/installation/next
-type command: npx shadcn@latest init
-open link: https://ui.shadcn.com/docs/components/button
-type command: npx shadcn@latest add button
-in folder components create component continue-with-google-button.tsx
-in component continue-with-google-button.tsx create and export function ContinueWithGoogleButton() as default
-import functions GoogleAuthProvider and signInWithPopup from package firebase/auth
-import function auth from firebase/client.ts file
-import component Button from component ui/button.tsx
-in jsx add component Button with event onClick
-in event onClick pass the anonymous function
-in anonymous function create variable const provider
-invoke function signInWithPopup() with two arguments
-in component login/page.tsx import component ContinueWithGoogleButton
-open route: http://localhost:3000/login
-click button Continue with Google
-open link: https://stackoverflow.com/questions/54636324/firebase-invalid-api-key-error-in-console
-add to env variables preface NEXT_PUBLIC for those used in client.ts file

11. Create auth context and display logged in user
-open link: https://stackoverflow.com/questions/76446840/cross-origin-opener-policy-policy-would-block-the-window-closed-call-error-while
-update next.config.ts file with async function header()
-open project in Firebase Console App to see users
-create folder context and component auth.tsx
-in component auth.tsx import functions createContext, useContext, useEffect and useState from package react
-import type User from package firebase/auth
-import function auth from firebase/client.ts file
-create and export function AuthProvider()
-create and export function useAuth()
-in component layout.tsx import function AuthProvider from component auth.tsx
-in jsx add component AuthProvider with closing and opening tags
-in component AuthProvider add body element with its content
-in folder components create component auth-buttons.tsx
-in component auth-buttons.tsx create and export function AuthButtons() as default
-import function useAuth from component auth.tsx
-import component Link from package next/link
-in function AuthButtons() create variable const auth
-in jsx add conditions !!auth?.currentUser && and !auth?.currentUser &&
-in component layout.tsx import function AuthButtons from component auth-buttons.tsx

12. Add logout functionality
-in component auth.tsx create async function logout
-in type AuthContextType add type for function logout
-in prop value add function logout
-in component auth-buttons.tsx add to div element event onClick
-in component auth.tsx create async function loginWithGoogle
-in type AuthContextType add type for function loginWithGoogle
-in prop value add function loginWithGoogle
-in component continue-with-google-button.tsx import function useAuth from component auth.tsx
-in function ContinueWithGoogleButton() create variable const auth
-in jsx, in event onClick pass the function auth?.loginWithGoogle()
-add new favicon icon
-open route: http://localhost:3000/login and click div for logout

13. Improve navbar styling
-in component layout.tsx import React component Home from package lucide-react
-add to component Link prop className and Tailwind CSS classes
-import function Poppins from package next/font/google
-create variable const poppins
-add to body element dynamic css class poppins.className
-in component auth-buttons.tsx, in jsx, add to elements Tailwind CSS classes

14. Improve login page styling
-open link: https://ui.shadcn.com/docs/components/card
-type command: npx shadcn@latest add card
-in folder (auth) create and export function AuthLayout() as default
-add to function AuthLayout() parameter children
-in jsx, add to parent div element Tailwind CSS classes
-open route: http://localhost:3000/login
-open route: http://localhost:3000/register
-in component ui/button.tsx, in function cva() add Tailwind CSS classes uppercase and tracking-widest 
-in component login/page.tsx import card components from component ui/card.tsx
-in jsx add component Card as parent component
-in globals.css file add new primary color --primary: oklch(29.3% 0.066 243.157)
-in component continue-with-google-button.tsx add to component Button props variant and className

15. Add the current user dropdown to the navbar
-open link: https://ui.shadcn.com/docs/components/avatar
type command: npx shadcn@latest add avatar
-open link: https://ui.shadcn.com/docs/components/dropdown-menu
-type command: npx shadcn@latest add dropdown-menu
-in component auth-buttons.tsx import dropdown and avatar components from folder ui
-import component Image from package next/image
-in jsx, in condition !!auth?.currentUser && add dropdown and avatar components
-in component Avatar add condition !!auth?.currentUser.photoURL && 
-in component AvatarFallback add condition if there is no users image
-in component DropdownMenuLabel create two div elements and dynamically show user name and email
-add four components DropdownMenuItem
-open link: https://stackoverflow.com/questions/77447587/the-images-domains-configuration-is-deprecated-please-use-images-remotepatte
-in next.config.ts file add object images
-open route: http://localhost:3000/