Next.js 15 & Firebase - Fire Homes Project


Section 01: Introduction & Setup

01. Introduction

02. Important! Please read this before you start the course! (GitHub repo etc)

03. Udemy ratings and reviews

04. How this setup differs from traditional React + Firebase apps

05. Overview of stack + helpful tools for this course

06. Set up Next JS project
-open web page: https://nextjs.org/
-type command: npx create-next-app@latest .
-create folder doc and documentation.txt file for project description
-update description in README.md file

07. Set up Firebase project
-open web page: https://firebase.google.com/
-create new project: Udemy Fire Homes Project
-open project and add authentication options
-create Firestore Database
-create Firebase Cloud Storage Bucket

08. Connect Next JS to Firebase
-select option Add Firebase to your web app
-open link: https://www.npmjs.com/package/firebase
-type command: npm install firebase
-create folder firebase and client.ts file
-in client.ts file import functions  initializeApp, getApps from package firebase/app
-import type Auth and function getAuth from package firebase/auth
-import type FirebaseStorage and function getStorage from package firebase/storage
-create variable const firebaseConfig 
-create variable let auth with type Auth
-create variable let storage with type FirebaseStorage
-add condition if (!currentApps.length) - else
-in condition if (!currentApps.length) create variable const app
-redeclare variables auth and storage
-in condition else create variable const app
-redeclare variables auth and storage
-export functions auth and storage
-open project settings and generate new private key
-create .env and example.env variables
-in .env file create variables: FIREBASE_PRIVATE_KEY_ID, FIREBASE_PRIVATE_KEY, FIREBASE_CLIENT_EMAIL and FIREBASE_CLIENT_ID
-in example.env file add example of created variable
-open link: https://www.npmjs.com/package/firebase-admin
-type command: npm i firebase-admin
-in folder firebase create server.ts file
-in server.ts file create variable const serviceAccount
-import function getApps and type ServiceAccount from package firebase-admin/app
-import function getFirestore and type Firestore from package firebase-admin/firestore
-import function function getAuth and type type Auth from package firebase-admin/auth
-import object admin from package firebase-admin
-create variable let firestore with type Firestore
-create variable let auth with type Auth
-create variable const currentApps 
-add condition if (!currentApps.length) - else
-in condition if (!currentApps.length) create variable const app
-redeclare variables firestore and auth 
-in condition else create variable const app
-redeclare variables firestore and auth 
-in .env.local create variables: FIREBASE_API_KEY, FIREBASE_MESSAGING_SENDER_ID and FIREBASE_APP_ID
-in example.env file add example of created variable


Section 02: Build the Login with Google functionality

09. Add the navbar with auth links
-in folder app create folder login and component page.tsx
-in component login/page.tsx create and export function LoginPage() as default
-create folder (auth) and move folder login to folder (auth)
-create folder register and component page.tsx
-in component register/page.tsx create and export function RegisterPage() as default
-open route: http://localhost:3000/login
-open route: http://localhost:3000/register
-in component layout.tsx import component Link
-jsx create nav element with Tailwind CSS classes
-in nav element add component Link and ul element

10. Install shadcn ui and add login with Google
-open web page: https://ui.shadcn.com/
-open link: https://ui.shadcn.com/docs/installation/next
-type command: npx shadcn@latest init
-open link: https://ui.shadcn.com/docs/components/button
-type command: npx shadcn@latest add button
-in folder components create component continue-with-google-button.tsx
-in component continue-with-google-button.tsx create and export function ContinueWithGoogleButton() as default
-import functions GoogleAuthProvider and signInWithPopup from package firebase/auth
-import function auth from firebase/client.ts file
-import component Button from component ui/button.tsx
-in jsx add component Button with event onClick
-in event onClick pass the anonymous function
-in anonymous function create variable const provider
-invoke function signInWithPopup() with two arguments
-in component login/page.tsx import component ContinueWithGoogleButton
-open route: http://localhost:3000/login
-click button Continue with Google
-open link: https://stackoverflow.com/questions/54636324/firebase-invalid-api-key-error-in-console
-add to env variables preface NEXT_PUBLIC for those used in client.ts file

11. Create auth context and display logged in user
-open link: https://stackoverflow.com/questions/76446840/cross-origin-opener-policy-policy-would-block-the-window-closed-call-error-while
-update next.config.ts file with async function header()
-open project in Firebase Console App to see users
-create folder context and component auth.tsx
-in component auth.tsx import functions createContext, useContext, useEffect and useState from package react
-import type User from package firebase/auth
-import function auth from firebase/client.ts file
-create and export function AuthProvider()
-create and export function useAuth()
-in component layout.tsx import function AuthProvider from component auth.tsx
-in jsx add component AuthProvider with closing and opening tags
-in component AuthProvider add body element with its content
-in folder components create component auth-buttons.tsx
-in component auth-buttons.tsx create and export function AuthButtons() as default
-import function useAuth from component auth.tsx
-import component Link from package next/link
-in function AuthButtons() create variable const auth
-in jsx add conditions !!auth?.currentUser && and !auth?.currentUser &&
-in component layout.tsx import function AuthButtons from component auth-buttons.tsx

12. Add logout functionality
-in component auth.tsx create async function logout
-in type AuthContextType add type for function logout
-in prop value add function logout
-in component auth-buttons.tsx add to div element event onClick
-in component auth.tsx create async function loginWithGoogle
-in type AuthContextType add type for function loginWithGoogle
-in prop value add function loginWithGoogle
-in component continue-with-google-button.tsx import function useAuth from component auth.tsx
-in function ContinueWithGoogleButton() create variable const auth
-in jsx, in event onClick pass the function auth?.loginWithGoogle()
-add new favicon icon
-open route: http://localhost:3000/login and click div for logout

13. Improve navbar styling
-in component layout.tsx import React component Home from package lucide-react
-add to component Link prop className and Tailwind CSS classes
-import function Poppins from package next/font/google
-create variable const poppins
-add to body element dynamic css class poppins.className
-in component auth-buttons.tsx, in jsx, add to elements Tailwind CSS classes

14. Improve login page styling
-open link: https://ui.shadcn.com/docs/components/card
-type command: npx shadcn@latest add card
-in folder (auth) create and export function AuthLayout() as default
-add to function AuthLayout() parameter children
-in jsx, add to parent div element Tailwind CSS classes
-open route: http://localhost:3000/login
-open route: http://localhost:3000/register
-in component ui/button.tsx, in function cva() add Tailwind CSS classes uppercase and tracking-widest 
-in component login/page.tsx import card components from component ui/card.tsx
-in jsx add component Card as parent component
-in globals.css file add new primary color --primary: oklch(29.3% 0.066 243.157)
-in component continue-with-google-button.tsx add to component Button props variant and className

15. Add the current user dropdown to the navbar
-open link: https://ui.shadcn.com/docs/components/avatar
type command: npx shadcn@latest add avatar
-open link: https://ui.shadcn.com/docs/components/dropdown-menu
-type command: npx shadcn@latest add dropdown-menu
-in component auth-buttons.tsx import dropdown and avatar components from folder ui
-import component Image from package next/image
-in jsx, in condition !!auth?.currentUser && add dropdown and avatar components
-in component Avatar add condition !!auth?.currentUser.photoURL && 
-in component AvatarFallback add condition if there is no users image
-in component DropdownMenuLabel create two div elements and dynamically show user name and email
-add four components DropdownMenuItem
-open link: https://stackoverflow.com/questions/77447587/the-images-domains-configuration-is-deprecated-please-use-images-remotepatte
-in next.config.ts file add object images
-open route: http://localhost:3000/


Section 03: Build the admin functionality and dashboard

16. Add the admin role to a user and save auth tokens in cookies
-in env.local file add variables ADMIN_EMAIL, NODE_ENV and FIREBASE_CLIENT_X509_CERT_UR
-in folder context create actions.ts file
-in actions.ts file import functions cookies and auth
-create and export async functions setToken() and removeToken()
-in component auth.tsx import functions setToken and removeToken from actions.ts file
-import type ParsedToken from package firebase/auth
-in function useEffect() add condition if (user) - else
-in server.ts file add process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n')
-open link: https://stackoverflow.com/questions/70281140/firebaseapperror-failed-to-parse-private-key-error-invalid-pem-formatted-mess
-in component auth.tsx create state variable const customClaims and set function setCustomClaims()
-in condition if (user) create four variables and invoke function setCustomClaims()
-in condition if (user) add condition if (token && refreshToken) 
-in condition if (token && refreshToken) invoke function await setToken()
-in condition else invoke function await removeToken()
-open route: http://localhost:3000/login and sign in
-open project in production and sign in
-open link: https://stackoverflow.com/questions/48076968/firebase-auth-unauthorized-domain-domain-is-not-authorized
-open project on Firebase and production domain

17. Conditionally render user profile menu items
-in component auth.tsx in type AuthContextType add type for variable customClaims
-in prop value add variable customClaims
-in component auth-buttons.tsx add conditions !!auth?.customClaims?.admin && and !auth?.customClaims?.admin &&

18. Add the admin dashboard page + route protections
-in folder app create folder admin-dashboard and component page.tsx
-in component admin-dashboard/page.tsx create and export function AdminDashboardPage() as default
-open route: http://localhost:3000/admin-dashboard
-open link: https://nextjs.org/docs/app/building-your-application/routing/middleware
-create middleware.ts file
-in middleware.ts file import object NextResponse and type NextRequest from package next/server
-import function cookies from package next/headers
-create and export async function middleware() with parameter request
-in function middleware() add condition if (request.method === 'POST')
-open link: https://www.npmjs.com/package/jose
-type command: npm i jose
-import function decodeJwt from package jose
-create variables const cookieStore and const token
-add condition if (!token)
-in condition if (!token) invoke function return NextResponse.redirect()
-create variable const decodedToken
-add condition if (!decodedToken.admin)
-in condition if (!decodedToken.admin) invoke function return NextResponse.redirect()
-after condition if add return return NextResponse.next()
-create and export variable const config 
-open route: http://localhost:3000/admin-dashboard after logging out from the app

19. Build  the admin dashboard main page
-open link: https://ui.shadcn.com/docs/components/breadcrumb
-type command: npx shadcn@latest add breadcrumb
-in component breadcrumb.tsx create and export function Breadcrumbs()
-in component admin-dashboard/page.tsx import component Breadcrumbs from component ui/breadcrumb.tsx
-in function AdminDashboardPage() add component Breadcrumbs with prop items
-import component Button from component ui/button.tsx
-import component Link from component next/link
-import React icon PlusCircleIcon from package lucide-react
-in jsx create h2 element with Tailwind CSS classes
-add component Button with Tailwind CSS classes
-in folder admin-dashboard create component layout.tsx
-in component layout.tsx create and export function AdminDashboardLayout()
-add to function AdminDashboardLayout() parameter children
-in jsx add to parent div element Tailwind CSS classes
-open route: http://localhost:3000/admin-dashboard

20. Create the New Property page
-in folder admin-dashboard create folder new-property and component page.tsx
-in component new-property/page.tsx create and export function NewPropertyPage() as default
-open route: http://localhost:3000/admin-dashboard/new-property
-in component admin-dashboard/page.tsx import component Breadcrumbs from component ui/breadcrumb.tsx
-in jsx add component Breadcrumbs with prop items
-in component breadcrumb.tsx, in function map() add component React.Fragment as parent component
-in component React.Fragment add condition i < items.length - 1 &&
-in component admin-dashboard/page.tsx update prop href

21. Create the new property form schema
-in component new-property/page.tsx import card components from component ui/card.tsx
-in folder new-property create component new-property-form.tsx
-in component new-property-form.tsx create and export function NewPropertyForm() as default
-add directive 'use client'
-in component new-property/page.tsx import component NewPropertyForm from component new-property-form.tsx
-in jsx add component Card
-in component Card add components Card CardHeader and CardContent
-in component CardContent add component NewPropertyForm
-open link: https://ui.shadcn.com/docs/components/form
-open web page: https://zod.dev
-open web page: https://react-hook-form.com
-type command: npx shadcn@latest add form
-create folder validation and propertySchema.ts file
-in propertySchema.ts file import object z from package zod
-create and export variable const propertyDataSchema

22. Create PropertyForm component and start building form UI
-in folder components create component property-form.tsx
-in component property-form.tsx create and export function PropertyForm() as default
-in component new-property/new-property-form.tsx import component PropertyForm from component property-form.tsx
-in component property-form import function useForm from package react-hook-form
-import object z from package zod
-import function zodResolver from package @hookform/resolvers/zod
-import variable propertyDataSchema from propertySchema.ts file
-create variable const form
-import component Form from component ui/form.tsx
-in component Form create form element
-add to component Form prop {...props}
-add to form element event onSubmit
-create type PropertyFormProps
-add to function PropertyForm() parameter handleSubmit with type PropertyFormProps
-in event onSubmit pass the function form.handleSubmit(handleSubmit)
-in form element create div element with Tailwind CSS grid classes
-in div element create fieldset element
-open link: https://ui.shadcn.com/docs/components/select
-type command: npx shadcn@latest add select
-import form components from component ui/form.tsx
-import select components from component ui/select.tsx
-in fieldset element add component FormField for status with props control, name and render
-in prop render pass anonymous function with parameter { field }
-in anonymous function add component FormItem
-in component new-property-form.tsx import component PropertyForm from component property-form.tsx
-import variable propertyDataSchema from propertySchema.ts file
-import object z from package zod
-create async function handleSubmit() with parameter data
-in jsx add to component PropertyForm prop handleSubmit
-open route: http://localhost:3000/admin-dashboard/new-property

23. Finish rendering the PropertyForm fields
-in component property-form.tsx add component FormField for address1
-open link: https://ui.shadcn.com/docs/components/input
-type command: npx shadcn@latest add input
-import component Input from component ui/input.tsx
-add component FormField for address2
-add component FormField for city
-add to fieldset element Tailwind CSS flex classes
-create another fieldset element with Tailwind CSS flex classes
-in another field element add component FormField for price
-add component FormField for bedrooms and bathrooms
-open link: https://ui.shadcn.com/docs/components/textarea
-type command: npx shadcn@latest add textarea
-import component Textarea from component ui/textarea
-add component FormField for description
-import component Button from component ui/button.tsx
-in type PropertyFormProps add type from submitButtonLabel
-add to function PropertyForm() parameter submitButtonLabel
-in jsx, in form element add component Button with prop type and className
-in component Button display dynamic value of parameter submitButtonLabel
-in component new-property-form.tsx import React icon PlusCircleIcon
-in jsx add to component PropertyForm prop submitButtonLabel
-open route: http://localhost:3000/admin-dashboard/new-property and click button Create Property

24. Create the saveNewProperty server action and save data to firestore
-in folder new-property create actions.ts file
-in actions.ts file add directive 'use server'
-create and export async function saveNewProperty() with parameter data
-import function auth and object firestore from firebase/server.ts file
-create variable const verifiedToken
-add condition if (!verifiedToken.admin)
-import variable propertyDataSchema from propertySchema.ts file
-create variable const validation
-add condition if (!validation.success)
-create variable const property
-add object return
-in component new-property-form.tsx import function useAuth from component context/auth.tsx
-create variable const auth
-import function saveNewProperty from new-property/actions.ts file
-create variable const response
-add condition if (!token) return
-create variable const response
-open route: http://localhost:3000/admin-dashboard/new-property and create new property
-open Firebase project and select Firestore Database

25. Improve the UI when submitting the new property form
-in component property-form.tsx add to fieldset element prop disabled
-add to component Button prop disabled
-open link: https://ui.shadcn.com/docs/components/sonner
-type command: npx shadcn@latest add sonner
-in component layout.tsx import component Toaster from component sonner.tsx
-in jsx add component Toaster in body element
-add to component Toaster props richColors and closeButton
-in component new-property-form.tsx import object sonner from package sonner
-add condition if (!!response.error)
-add function toast.success()
-import function useRouter from package next/navigation
-create variable const router
-invoke function router.push()
-open route: http://localhost:3000/admin-dashboard/new-property and create new property
-open Firebase project and select Firestore Database

26. Query for properties data
-create folder data and properties.ts file
-in properties.ts file add import 'server-only'
-create folder types and propertyStatus.ts file
-in propertyStatus.ts file create and export type PropertyStatus
-in properties.ts file import type PropertyStatus from propertyStatus.ts file
-create type GetPropertiesOptions
-create and export async function getProperties()
-add to function getProperties() parameter options with type GetPropertiesOptions
-import object firestore from firebase/server.ts file
-in function getProperties() create variables const page and const pageSize 
-destructure variables const { minPrice, maxPrice, minBedrooms, status }
-create variable let propertiesQuery
-add condition if (minPrice !== null && minPrice !== undefined)
-add condition if (maxPrice !== null && maxPrice !== undefined)
-add condition if (minBedrooms !== null && minBedrooms !== undefined)
-add condition if (status)
-create variables const propertiesSnapshot and const properties
-add object return
-in component admin-dashboard/page.tsx import function getProperties from properties.ts file
-add to function AdminDashboardPage keyword async
-create variable const data
-open route: http://localhost:3000/admin-dashboard to see created properties

27. Render the properties list in a table
-open link: https://ui.shadcn.com/docs/components/table
-type command: npx shadcn@latest add table
-in folder admin-dashboard create component properties-table.tsx
-in component properties-table.tsx create and export async function PropertiesTable
-in component admin-dashboard/page.tsx import component PropertiesTable from component properties-table.tsx 
-open route: http://localhost:3000/admin-dashboard
-in component properties-table.tsx import table components from component ui/table.tsx
-in jsx add conditions !data && !!data &&
-in condition !!data && add table components
-in folder types create property.ts file
-in property.ts file create and export type Property
-in properties.ts file import type Property from property.ts file
-in anonymous function with parameter doc add type as Property
-in component properties-table.tsx, in component TableBody invoke function data?.map()
-open route: http://localhost:3000/admin-dashboard to see information about properties

28. Calculate the total pages for a firestore query
-create and export function getTotalPages() with parameters firestoreQuery and pageSize
-in properties.ts file import function getTotalPages from server.ts file
-create variable const totalPages 
-in object return add variable totalPages
-in component properties-table.tsx destructure variable totalPages from function getProperties()
-open route: http://localhost:3000/admin-dashboard

29. Render the pagination buttons under the properties table
-in component properties-table.tsx, add to function PropertiesTable() parameter page with type
-in component admin-dashboard/page.tsx, add to function AdminDashboardPage() parameter  searchParams
-create variable const searchParamsValue
-in jsx, add to component PropertiesTable prop page
-in component properties-table.tsx import component Button from component button.tsx
-import component Link from package next/link
-import component TableFooter from component table.tsx
-in jsx add component TableFooter 
-open route: http://localhost:3000/admin-dashboard?page=1 and page=2 to see information about properties

30. Create the edit property page
-open link: https://stackoverflow.com/questions/58467000/how-to-bypass-warning-unexpected-any-specify-a-different-type-typescript-eslin
-in eslint.config.mjs file add object rules
-in component properties-table.tsx, in component TableCell for updating property add component Button with props asChild, variant and size
-open route: http://localhost:3000/admin-dashboard and click edit button
-create folders edit-property, [propertyId] and component page.tsx
-in component [propertyId]/page.tsx create and export async function EditPropertyPage() as default
-open route: http://localhost:3000/admin-dashboard/edit-property/[propertyId]
-in properties.ts file create and export async function getPropertyById()
-add to function getPropertyById() parameter propertyId with type string
-create variables const propertySnapshot and const propertyData
-add to variable propertyData type as Property
-add return propertyData
-in component [propertyId]/page.tsx import function getPropertyById from properties.ts file
-add to function EditPropertyPage() parameter params
-create variables const paramsValue and const property
-import component Breadcrumbs from component breadcrumb.tsx
-in jsx add component Breadcrumbs with prop items
-import card components from component card.tsx

31. Create the edit property form
-in folder [propertyId] create component edit-property-form.tsx
-in component edit-property-form.tsx create and export function EditPropertyForm()
-import type Property from property.ts file
-create type EditPropertyFormProps
-add to function EditPropertyForm() 10 parameters
-in component [propertyId]/page.tsx import component EditPropertyForm from component edit-property-form.tsx
-in component property-form.tsx add in type PropertyFormProps type for defaultValues parameter
-add to function PropertyForm() parameter defaultValues
-create variable const combinedDefaultValues
-in component edit-property-form.tsx import component PropertyForm from component property-form.tsx
-create async function handleSubmit() with parameter data
-import object z from package zod
-import variable propertyDataSchema
-add to parameter data type z.infer<typeof propertyDataSchema>
-in jsx add component PropertyForm with props handleSubmit, submitButtonLabel and defaultValues
-in component [propertyId]/page.tsx, in jsx add to component EditPropertyForm props
-in component property-form.tsx, add to variable combinedDefaultValues type z.infer<typeof propertyDataSchema>
-in component edit-property-form.tsx import React icon SaveIcon from package lucide-react
-open route: http://localhost:3000/admin-dashboard/edit-property/[propertyId]

32. Create the updateProperty server action
-in eslint.config.mjs file, in object rules add another rules for unused variables
-in folder [propertyId] create actions.ts file
-in actions.ts file create and export async function updateProperty()
-add directive 'use server'
-import type Property from property.ts file
-add to function updateProperty() parameter data and authToken with types
-import function auth and object firestore from firebase/server.ts file
-import variable propertyDataSchema from propertySchema.ts file
-destructure variables const { id, ...propertyData } from parameter data
-create variable const verifiedToken
-add condition if (!verifiedToken.admin)
-create variable const validation
-add condition if (!validation.success)
-invoke function await firestore.collection()
-in component edit-property-form.tsx import function auth from firebase/client.ts file
-in function handleSubmit() create variable const token
-add condition if (!token)
-import function updateProperty from actions.ts file
-in function handleSubmit() invoke function await updateProperty()
-import function useRouter from package next/navigation
-create variable const router
-in function handleSubmit() invoke function router.push('admin-dashboard')
-import function toast from package sonner
-in function handleSubmit() invoke function toast.success()
-in folder new-property, in actions.ts file, rename the function saveNewProperty() to createProperty()
-add to function createProperty() second parameter authToken with type string
-open route: http://localhost:3000/admin-dashboard/edit-property/[propertyId] and update property

33. Add route protection for all admin routes and auth pages
-in middleware.ts file add in array matcher route /admin-dashboard/:path*
-add condition if (token && request.nextUrl.pathname.startsWith('/login'))
-add condition if (!token && request.nextUrl.pathname.startsWith('/login'))
-add condition if (token && request.nextUrl.pathname.startsWith('/login'))
-in component auth-buttons.tsx import function useRouter from package next/navigation
-in jsx, in event onClick, in anonymous function invoke function router.refresh()
-in component continue-with-google.tsx, in event onClick add to anonymous function keyword async
-import function useRouter from package next/navigation
-create variable const router
-in anonymous async function invoke function router.refresh()
-open route: http://localhost:3000/login

34. Improve the styling of the properties table
-open link: https://www.npmjs.com/package/numeral
-type command: npm i numeral
-type command: npm i --save-dev @types/numeral
-in component properties-table.tsx import function numeral from package numeral
-in jsx, in component TableCell for price invoke function numeral()
-in component TableCell for view property add component Button
-open route: http://localhost:3000/admin-dashboard
-in folder component create component property-status-badge.tsx
-in component property-status-badge.tsx create and export function PropertyStatusBadge() as default
-import type PropertyStatus from propertyStatus.ts file
-add to function PropertyStatusBadge() parameter status with type PropertyStatus
-create variable const statusLabel
-in function PropertyStatusBadge() create variable const label
-open link: https://ui.shadcn.com/docs/components/badge
-type command: npx shadcn@latest add badge
-create variable const variant with object type [key: string]
-in component property-status-badge.tsx import component Badge from component badge.tsx
-in jsx add component Badge with prop variant
-in component properties-table.tsx import component PropertyStatusBadge from component property-status-badge.tsx
-in component TableCell for status add component PropertyStatusBadge with prop status
-open route: http://localhost:3000/admin-dashboard/new-property and create properties with all four different status to see badge colors
-in component Button for displaying pagination add prop disabled
-open route: http://localhost:3000/admin-dashboard


Section 04: Build the image uploads functionality

35. Create the image uploader component
-in folder component create component multi-image-uploader.tsx
-in component multi-image-uploader.tsx create and export function MultiImageUploader() as default
-in component multi-image-uploader.tsx add directive 'use client'
-create type type MultiImageUploaderProps
-add to function MultiImageUploader() parameters images and onImagesChange with type MultiImageUploaderProps
-in folder types create imageUpload.ts file
-in imageUpload.ts file create and export type ImageUpload
-in component multi-image-uploader.tsx import type ImageUpload from imageUpload.ts file
-import component Button from component button.tsx
-in jsx add to parent div element Tailwind CSS classes
-in div element add component Button with type button
-create input element with attributes ref, type, multiple, accept and className
-import function useRef from package react
-create variable const uploadInputRef
-add to component Button event onClick
-in event onClick invoke anonymous function
-in anonymous function invoke function uploadInputRef.current.click()
-in component property-form.tsx import function MultiImageUploader from component multi-image-uploader.tsx
-in jsx add component MultiImageUploader with prop onImagesChange

36. Store selected images in the form state
-in component multi-image-uploader.tsx create function handleInputChange()
-add to function handleInputChange() parameter e with type React.ChangeEvent<HTMLInputElement>
-in function handleInputChange() create variable const files
-in jsx add to input element event onChange
-in event onChange pass the function handleInputChange
-in function handleInputChange() create variable const newImages
-invoke function onImagesChange()
-in component property-form.tsx import type ImageUpload from imageUpload.ts file
-in propertySchema.ts file create and export variables const propertyImagesSchema nad const propertySchema
-in component property-form.tsx import variable propertySchema from propertySchema.ts file
-remove all variables propertyDataSchema and replace them with propertySchema
-in variable const combinedDefaultValues add default value for images
-in prop onImagesChange, invoke function form.setValue()
-add component FormField with props control, name and render for images
-in prop render, in component FormControl add component MultiImageUploader
-open route: http://localhost:3000/admin-dashboard/new-property and click button Upload images

37. Render the images list
-open link: https://github.com/hello-pangea/dnd
-type command: npm i @hello-pangea/dnd
-in component multi-image-uploader.tsx import components DragDropContext, Droppable and Draggable from package hello-pangea/dnd
-in jsx, in parent div element add component DragDropContext with prop onDragEnd
-in DragDropContext add component Droppable with props droppableId and direction
-in component Droppable invoke anonymous function with parameter (provided)
-in anonymous function create div element with with props provided and ref
-in div element invoke function images.map()
-in function map() add component Draggable with props key, draggableId and index
-in component Draggable invoke anonymous function with parameter provided
-in anonymous function create div element with props draggableProps, dragHandleProps, ref and className
-in div element create div element with Tailwind CSS flex classes
-import component Image from package next/image
-create div element for component Image
-import component Badge from component badge.tsx
-create div element for displaying p element and component Badge 
-import React icons XIcon and from package lucide-react
-create div element with Tailwind CSS flex classes for displaying React icons
-open route: http://localhost:3000/admin-dashboard/new-property and click button Upload images

38. Implement reorder and delete images
-in component multi-image-uploader.tsx import type DropResult from package hello-pangea/dnd
-create function handleDragEndImage() with parameter result
-add to parameter result type DropResult
-in jsx, in prop onDragEnd pass the function handleDragEndImage
-in function handleDragEndImage() add condition if (!result.destination)
-create variable const items
-destructure variable const [reorderedItems]
-invoke function items.splice()
-invoke function onImagesChange(items)
-create function handleDeleteImage()
-add to function handleDeleteImage() parameter id with type string
-in function handleDeleteImage() create variable const updatedImages
-invoke function onImagesChange(updatedImages)
-in jsx add to button element event onClick
-in event onClick pass the function handleDeleteImage(image.id)
-open route: http://localhost:3000/admin-dashboard/new-property and click button Upload images

39. Implement upload images to firebase storage for new properties
-in component multi-image-uploader, in jsx add {provided.placeholder}
-in Firebase project, open Firebase storage and add rules for allow read and allow write
-in component new-property-form.tsx import variable propertySchema from propertySchema.ts file
-in function handleSubmit() destructure variables const { images, ...rest } from parameter data
-import type UploadTask from package firebase/storage
-create variable const uploadTasks with type UploadTask[]
-create variable const paths with type string[]
-invoke function images.forEach()
-in function forEach() add condition if (image.file)
-in condition if (image.file) create variable const path
-invoke function paths.push(path)
-import functions ref and uploadBytesResumable from package firebase/storage
-import object storage from firebase/client.ts file
-create variable const storageRef
-invoke function uploadTasks.push()
-invoke function await Promise.all(uploadTasks)
-in new-property/actions.ts file import object z from package zod
-create and export async function savePropertyImages() with two parameters
-in function savePropertyImages() first parameter is object and second parameter is authToken
-create variable const verifiedToken
-add condition if (!verifiedToken.admin)
-create variable const schema
-create variable const validation
-add condition if(!validation.success)
-invoke function await firestore
-in component new-property-form.tsx import function savePropertyImages from actions.ts file
-invoke function await savePropertyImages()
-add condition if (!!response.error || !response.propertyId)
-open route: http://localhost:3000/admin-dashboard/new-property add information about property with images and click button Create Property
-open Firebase storage to see uploaded images

40. Load existing uploaded images into the edit property form
-open link: https://stackoverflow.com/questions/68574254/body-exceeded-1mb-limit-error-in-next-js-api-route
-in next.config.ts file add object experimental
-in property.ts file, in type Property add type for images
-in component edit-property-form.tsx, add to function EditPropertyForm parameter images
-in jsx, add to component PropertyForm prop images
-in component [propertyId]/page.tsx, in jsx add to component EditPropertyForm prop images
-open route: http://localhost:3000/admin-dashboard/edit-property/[[propertyId]]
-in component multi-image-uploader.tsx, add to type MultiImageUploaderProps type for urlFormatter
-add to function MultiImageUploader() parameter urlFormatter
-in jsx, in component Image, in prop src add ternary condition for variable urlFormatter
-in component property-form.tsx, in jsx, add to component MultiImageUploader prop urlFormatter
-in prop urlFormatter pass anonymous function with parameter image
-in anonymous function add condition if (!image.url)
-in next.config.ts file, in array remotePatterns add object for Firebase storage images

41. Implement upload + delete images when updating a property
-in component edit-property-form.tsx import variable propertySchema from propertySchema.ts file
-destructure variables const { images: newImages, ...rest } from parameter data
-create variable const response
-import functions ref, deleteObject, uploadBytesResumable and type UploadTask from package firebase/storage
-create variable const storageTasks with types (UploadTask | Promise<void>)[]
-create variable const imagesToDelete
-invoke function imagesToDelete.forEach()
-create variable const paths with type string[]
-invoke function newImages.forEach()
-in function forEach() add condition if (image.file) - else
-in condition if (image.file) create variable const path
-invoke function paths.push(path)
-create variable const storageRef
-invoke function storageTasks.push()
-in condition else invoke function paths.push(image.url)
-invoke function await Promise.all(storageTasks)
-in folder admin-dashboard create actions.ts file
-move function savePropertyImages to actions.ts file
-in component edit-property-form.tsx import function savePropertyImages from actions.ts file
-invoke function await savePropertyImages()
-open route: http://localhost:3000/admin-dashboard/edit-property/[[propertyId]] and update property with new images
-open Firebase storage to see uploaded images


Section 05: Build the property preview pages

42. Create the property page and render the description as markdown
-in folder admin-dashboard create folders property and [propertyId]
-in folder [propertyId] create component page.tsx
-in component [propertyId]/page.tsx create and export function PropertyPage() as default
-add to function PropertyPage() keyword async
-add to function PropertyPage() parameter params with type any
-create variable const paramsValue
-import function getPropertyById from properties.ts file
-create variable const property
-in jsx add to parent div element with Tailwind CSS grid classes
-open link: https://www.npmjs.com/package/react-markdown
-type command: npm i react-markdown
-import component ReactMarkdown from package react-markdown
-import React icon ArrowLeftIcon from package lucide-react
-import component Button from component button.tsx
-import component Link from package next/link
-add css styling in globals.css file
-open route: http://localhost:3000/property/[propertyId]

43. Render the property details
-in component [propertyId]/page.tsx import component PropertyStatusBadge from component property-status-badge.tsx
-create variable const addressLines
-in jsx add to div element for component PropertyStatusBadge Tailwind CSS grid classes
-in div element with grid classes create div element with flex classes
-in div element with flex classes invoke function addressLines?.map()
-add component PropertyStatusBadge with prop status
-create h2 element with Tailwind CSS classes
-add to component PropertyStatusBadge prop class
-in component property-status-badge.tsx, add to function PropertyStatusBadge() parameter className with type string
-in component [propertyId]/page.tsx import function numeral from package numeral
-in jsx create h3 element with Tailwind CSS classes for property price
-import React icons BedIcon and BathIcon from package lucide-react
-create div elements with Tailwind CSS classes for properties bedrooms and bathrooms
-open route: http://localhost:3000/property/[propertyId]

44. Render the property images carousel and back button
-open link: https://ui.shadcn.com/docs/components/carousel
-type command: npx shadcn@latest add carousel
-in component [propertyId]/page.tsx import carousel components from component carousel.tsx
-in jsx add condition !!property.images && and carousel components
-import component Image from package next/image
-in condition !!property.images &&  add component Carousel
-in component Carousel add component CarouselContent
-in component CarouselContent invoke function property?.images?.map()
-add condition property?.images?.length > 1 && 
-create component back-button.tsx
-in component back-button.tsx create and export function BackButton() as default
-in component [propertyId]/page.tsx import component BackButton from component back-button.tsx
-open route: http://localhost:3000/property/[propertyId]


Section 06: Build the property search page and functionality

45. Create the property search page and search filters
-create folder property-search and component page.tsx
-in component page.tsx create and export function PropertySearchPage() as default
-import card components from component card.tsx
-in jsx, add to parent div element Tailwind CSS classes
-in parent div element create elements h2 with Tailwind CSS classes
-add component Card
-create component filters-form.tsx
-in component filters-form.tsx create and export function FiltersForm() as default
-in component page.tsx import component FiltersForm from component filters-form.tsx
-in jsx, in component CardContent add component FiltersForm
-in component filters-form.tsx create variable const formSchema
-import form components form component form.tsx
-import component Button from component button.tsx
-create function handleSubmit()
-in jsx, add component Form as parent component
-in component Form create form element
-in form element add three component FormFiled for filters minPrice, maxPrice and minBedrooms
-in form element add component Button with prop type
-open route: http://localhost:3000/property-search

46. Hook up the search filters to the URL and create firestore indexes
-open link: https://nextjs.org/docs/app/api-reference/functions/use-search-params
-open link: https://react.dev/reference/react/Suspense
-in component filters-form.tsx, in function handleSubmit() create variable const newSearchParams
-add three if conditions
-import functions useRouter and useSearchParams from package next/navigation
-create variable const router
-in function handleSubmit() invoke function router.push() 
-create variable const searchParams
-in component property-search/page.tsx import component Suspense from package react
-in component CardContent add component Suspense
-in component Suspense add component FiltersForm
-in component filters-form, update object defaultValues
-open route: http://localhost:3000/property-search?minPrice=10000&maxPrice=1000000&minBedrooms=1&page=1
-in component property-search/page.tsx, add to function PropertySearch() parameter searchParams with type Promise<any>
-add to function PropertySearch() keyword async
-create variable const searchParamsValues
-create four variables const parsedPage, parsedMinPrice, parsedMaxPrice and parsedMinBedrooms
-create four variables const page, const minPrice, const maxPrice and const minBedrooms
-import function getProperties from properties.ts file
-create variable const properties
-open link: https://stackoverflow.com/questions/50207339/cloud-firestore-failed-precondition-the-query-requires-an-index
-open Firebase project and create indexes
-open route: http://localhost:3000/property-search and search with filters

47. Render the filtered property list
-in component property-search/page.tsx, in parent div element create div element with Tailwind CSS grid classes
-in div element invoke function data?.map()
-destructure variables const { data, totalPages } from variable properties
-in function map() add component Card
-in component Card add component CardContent
-import component Image from package next/image
-in component CardContent add condition !!property?.images?.[0] && () and component Image
-add to component Image props src, alt, className and fill
-in folder lib create imageUrlFormatter.ts file
-in imageUrlFormatter.ts file create and export function imageUrlFormatter() with parameter imagePath
-add to parameter imagePath type string
-in component property-search import function imageUrlFormatter from  imageUrlFormatter.ts file
-in prop src add function imageUrlFormatter() with parameter property?.images?.[0]
-import React icons HomeIcon, BedIcon and BathIcon from package lucide-react
-add condition !property?.images?.[0] && 
-in condition !property?.images?.[0] && create div element with Tailwind CSS flex classes
-create variable const addressLines
-create div element with Tailwind CSS flex classes for displaying variable addressLines
-create div element for displaying bedrooms and bathrooms
-import function numeral from package numeral
-create p element for displaying property price
-import component Button from component button.tsx
-import component Link from package next/link
-in jsx add component Button with prop asChild
-in component Button add component Link with prop href
-open route: http://localhost:3000/property-search

48. Add the pagination buttons for property search
-in component property-search/page.tsx create div element with Tailwind CSS flex classes
-in div element invoke function Array.from().map()
-in function map() add component Button with props key, asChild, disabled and variant
-in component Button add component Link
-in function map() create variable
-add conditions if for minPrice, maxPrice and minBedrooms
-invoke function newSearchParams.set()
-in component Link, in prop href add dynamic href with variable newSearchParams
-in component filters-form.tsx import component FormLabel from component form.tsx
-in components FormItem add components FormLabel
-open route: http://localhost:3000/property-search and search with filters


Section 07: Build the login and register with email + password functionality

49. Create the register form schema
-in middleware.ts file, in array matcher add route register
-in conditions if !token and if token add request.nextUrl.pathname.startsWith('/register')
-in component register/page.tsx import card components from component card.tsx
-create component register-form.tsx
-in component register-form.tsx create and export function RegisterForm() as default
-add direction 'use client'
-in component register/page.tsx import component RegisterForm() from component register-form.tsx
-in component register-form.tsx import object z from package zod
-create variable const formSchema 
-import function useForm from package react-hook-form
-import function zodResolver from package hookform/resolvers/zod
-create variable const form
-open route: http://localhost:3000/register

50. Render the register form UI
-in component register-form.tsx import form components from component form.tsx
-create async function handleSubmit() with parameter data
-add to parameter data type z.infer<typeof formSchema>
-in jsx add component Form as parent component with prop {...form}
-in component Form create form element with event onSubmit
-in event onSubmit invoke function handleSubmit()
-in form element add four components FormField
-import component Input from component input.tsx
-import component Button from component button.tsx
-add to form element Tailwind CSS flex classes
-create p element with Tailwind CSS class text-center
-import component ContinueWithGoogleButton from component continue-with-google-button.tsx
-open route: http://localhost:3000/register

51. Create the register user server action
-in folder validation create registerUser.ts file
-move variable formSchema from component register-form.tsx in registerUser.ts file
-rename variable formSchema to registerUserSchema
-in component register-form.tsx import variable registerUserSchema
-create actions.ts file
-in actions.ts file add directive 'use server'
-create and export async function registerUser()
-add to function registerUser() parameter data with types
-import variable registerUserSchema from registerUser.ts file
-create variable const validation
-add condition if (!validation.success)
-import object auth from firebase/server.ts file
-add blocks of code try - catch
-in block code try invoke function await auth.createUser()
-in block code catch add object return
-in component register-form.tsx import function registerUser from actions.ts file
-in function handleSubmit() create variable const response
-add condition if (!!response?.error)
-import function toast from package sonner
-in condition if (!!response?.error) invoke function toast.error() and add return
-after condition if invoke function toast.success()
-import function useRouter from package next/navigation
-create variable const router
-in function handleSubmit() invoke function router.push('/login')
-open route: http://localhost:3000/register
-register for example: Test, test@email.com, !Test12345